import SwiftSyntax
import SwiftSyntaxBuilder

struct MacroError: Error {
    let message: String
}

public enum MockableGenerator {
    /// Processes a protocol declaration to generate a nested mock struct.
    ///
    /// This function takes a `ProtocolDeclSyntax` and generates a corresponding mock struct
    /// that contains a nested `Spying` struct. The `Spying` struct will hold the `Spy` properties
    /// and stubbing methods for each function in the protocol.
    ///
    /// For example, given the following protocol:
    /// ```swift
    /// protocol PricingService {
    ///     func price(_ item: String) -> Int
    /// }
    /// ```
    /// This function will generate the following structure:
    /// ```swift
    /// public struct PricingServiceMock {
    ///     public struct Spying {
    ///         // ... Spy properties and stubbing methods generated by SpyGenerator ...
    ///     }
    /// }
    /// ```
    public static func processProtocol(protocolDecl: ProtocolDeclSyntax) throws -> [DeclSyntax] {
        let protocolName = protocolDecl.name.text
        let mockName = protocolName + "Mock"
        let spyingName = "Spying"

        // Generate the inner Spying struct content using SpyGenerator
        let spyingStruct = try SpyGenerator.processProtocol(protocolDecl: protocolDecl, structName: spyingName)

        // Create the outer Mock struct
        let mockStruct = StructDeclSyntax(
            name: TokenSyntax.identifier(mockName),
            memberBlock: MemberBlockSyntax {
                MemberBlockItemListSyntax {
                    MemberBlockItemSyntax(decl: spyingStruct)
                }
            }
        )

        return [DeclSyntax(mockStruct)]
    }
}
