{"metadata":{"roleHeading":"Initializer","role":"symbol","extendedModule":"SwiftMocking","modules":[{"name":"SwiftMocking"}],"symbolKind":"init","title":"init(floatLiteral:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Argument"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":".","type":"text"}]},"externalID":"s:12SwiftMocking10ArgMatcherVAASdRszlE12floatLiteralACySdGSd_tcfc","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"floatLiteral","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FloatLiteralType","kind":"typeIdentifier","preciseIdentifier":"s:s16FloatLiteralTypea"},{"text":")","kind":"text"}]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"floatLiteral"},{"kind":"text","text":" "},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s16FloatLiteralTypea","text":"FloatLiteralType","kind":"typeIdentifier"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftmocking\/argmatcher\/init(floatliteral:)"]}],"abstract":[{"type":"text","text":"Initializes an "},{"type":"codeVoice","code":"ArgMatcher"},{"text":" with a float literal, matching arguments equal to the literal value.","type":"text"}],"identifier":{"url":"doc:\/\/SwiftMocking\/documentation\/SwiftMocking\/ArgMatcher\/init(floatLiteral:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SwiftMocking\/documentation\/SwiftMocking","doc:\/\/SwiftMocking\/documentation\/SwiftMocking\/ArgMatcher","doc:\/\/SwiftMocking\/documentation\/SwiftMocking\/ArgMatcher\/ExpressibleByFloatLiteral-Implementations"]]},"sections":[],"references":{"doc://SwiftMocking/documentation/SwiftMocking/ArgMatcher":{"url":"\/documentation\/swiftmocking\/argmatcher","type":"topic","abstract":[{"text":"A type that matches arguments in a test double.","type":"text"}],"identifier":"doc:\/\/SwiftMocking\/documentation\/SwiftMocking\/ArgMatcher","navigatorTitle":[{"text":"ArgMatcher","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArgMatcher"}],"title":"ArgMatcher","role":"symbol"},"doc://SwiftMocking/documentation/SwiftMocking":{"url":"\/documentation\/swiftmocking","type":"topic","kind":"symbol","title":"SwiftMocking","identifier":"doc:\/\/SwiftMocking\/documentation\/SwiftMocking","abstract":[],"role":"collection"},"doc://SwiftMocking/documentation/SwiftMocking/ArgMatcher/ExpressibleByFloatLiteral-Implementations":{"identifier":"doc:\/\/SwiftMocking\/documentation\/SwiftMocking\/ArgMatcher\/ExpressibleByFloatLiteral-Implementations","title":"ExpressibleByFloatLiteral Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/swiftmocking\/argmatcher\/expressiblebyfloatliteral-implementations","type":"topic","kind":"article"},"doc://SwiftMocking/documentation/SwiftMocking/ArgMatcher/init(floatLiteral:)":{"kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"floatLiteral"},{"text":": ","kind":"text"},{"text":"FloatLiteralType","kind":"typeIdentifier","preciseIdentifier":"s:s16FloatLiteralTypea"},{"text":")","kind":"text"}],"identifier":"doc:\/\/SwiftMocking\/documentation\/SwiftMocking\/ArgMatcher\/init(floatLiteral:)","type":"topic","abstract":[{"text":"Initializes an ","type":"text"},{"code":"ArgMatcher","type":"codeVoice"},{"type":"text","text":" with a float literal, matching arguments equal to the literal value."}],"url":"\/documentation\/swiftmocking\/argmatcher\/init(floatliteral:)","title":"init(floatLiteral:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Argument","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}]}}}}